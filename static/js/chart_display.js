let chartInstance = null;

function getColor(index) {
    const colors = [
        "#3b82f6", "#ef4444", "#10b981", "#f59e0b",
        "#6366f1", "#ec4899", "#22d3ee", "#a855f7",
        "#14b8a6", "#f97316", "#8b5cf6", "#0ea5e9",
        "#e11d48", "#7c3aed", "#059669", "#d97706",
        "#4b5563", "#d946ef", "#0d9488", "#f43f5e"
    ];
    return colors[index % colors.length];
}


const countryTranslation = {
    "Australia": "–ê–≤—Å—Ç—Ä–∞–ª—ñ—è", "Austria": "–ê–≤—Å—Ç—Ä—ñ—è", "Belgia": "–ë–µ–ª—å–≥—ñ—è", "Bu≈Çgaria": "–ë–æ–ª–≥–∞—Ä—ñ—è",
    "Chorwacja": "–•–æ—Ä–≤–∞—Ç—ñ—è", "Cypr": "–ö—ñ–ø—Ä", "Czechy": "–ß–µ—Ö—ñ—è", "Dania": "–î–∞–Ω—ñ—è", "Estonia": "–ï—Å—Ç–æ–Ω—ñ—è",
    "Finlandia": "–§—ñ–Ω–ª—è–Ω–¥—ñ—è", "Francja": "–§—Ä–∞–Ω—Ü—ñ—è", "Grecja": "–ì—Ä–µ—Ü—ñ—è", "Hiszpania": "–Ü—Å–ø–∞–Ω—ñ—è",
    "Holandia": "–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏", "Indie": "–Ü–Ω–¥—ñ—è", "Irlandia": "–Ü—Ä–ª–∞–Ω–¥—ñ—è", "Irlandia P√≥≈Çnocna": "–ü—ñ–≤–Ω—ñ—á–Ω–∞ –Ü—Ä–ª–∞–Ω–¥—ñ—è",
    "Islandia": "–Ü—Å–ª–∞–Ω–¥—ñ—è", "Litwa": "–õ–∏—Ç–≤–∞", "Malta": "–ú–∞–ª—å—Ç–∞", "Niemcy": "–ù—ñ–º–µ—á—á–∏–Ω–∞",
    "Norwegia": "–ù–æ—Ä–≤–µ–≥—ñ—è", "Polska": "–ü–æ–ª—å—â–∞", "Portugalia": "–ü–æ—Ä—Ç—É–≥–∞–ª—ñ—è", "Rumunia": "–†—É–º—É–Ω—ñ—è",
    "Szwajcaria": "–®–≤–µ–π—Ü–∞—Ä—ñ—è", "Szwecja": "–®–≤–µ—Ü—ñ—è", "S≈Çowacja": "–°–ª–æ–≤–∞—á—á–∏–Ω–∞", "S≈Çowenia": "–°–ª–æ–≤–µ–Ω—ñ—è",
    "Wielka Brytania": "–í–µ–ª–∏–∫–∞ –ë—Ä–∏—Ç–∞–Ω—ñ—è", "Wƒôgry": "–£–≥–æ—Ä—â–∏–Ω–∞", "W≈Çochy": "–Ü—Ç–∞–ª—ñ—è", "≈Åotwa": "–õ–∞—Ç–≤—ñ—è",
    "–ù–µ–≤—ñ–¥–æ–º–æ": "–ù–µ–≤—ñ–¥–æ–º–æ"
};

function unifyCountryName(original, source) {
    if (source === "ukraine") return original;
    return countryTranslation[original] || original;
}

const translationMap = {
    "Aerozol": "–ê–µ—Ä–æ–∑–æ–ª—å", "Balsam": "–ë–∞–ª—å–∑–∞–º", "Gaz": "–ì–∞–∑", "≈ªel": "–ì–µ–ª—å",
    "Granulat": "–ì—Ä–∞–Ω—É–ª–∏", "Dra≈ºetki": "–î—Ä–∞–∂–µ", "Ekstrakt": "–ï–∫—Å—Ç—Ä–∞–∫—Ç", "Emulsja": "–ï–º—É–ª—å—Å—ñ—è",
    "Tabletki": "–¢–∞–±–ª–µ—Ç–∫–∏", "Kapsu≈Çki": "–ö–∞–ø—Å—É–ª–∏", "Ma≈õƒá": "–ú–∞–∑—å", "Syrop": "–°–∏—Ä–æ–ø",
    "Krople": "–ö—Ä–∞–ø–ª—ñ", "Roztw√≥r": "–†–æ–∑—á–∏–Ω", "Zawiesina": "–°—É—Å–ø–µ–Ω–∑—ñ—è", "Pasta": "–ü–∞—Å—Ç–∞",
    "P≈Çyn": "–†—ñ–¥–∏–Ω–∞", "Liofilizat": "–õ—ñ–æ—Ñ—ñ–ª—ñ–∑–∞—Ç", "Czopki": "–°—É–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó", "Spray": "–°–ø—Ä–µ–π",
    "Substancja": "–°—É–±—Å—Ç–∞–Ω—Ü—ñ—è", "Implant": "–ü—ñ–¥—à–∫—ñ—Ä–Ω—ñ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç–∏", "Plaster": "–ü–ª–∞—Å—Ç–∏—Ä",
    "Szampon": "–®–∞–º–ø—É–Ω—å", "Koncentrat": "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç", "Proszek": "–ü–æ—Ä–æ—à–æ–∫", "Zio≈Ça": "–¢—Ä–∞–≤–∞",
    "Globulki": "–ü–µ—Å–∞—Ä—ñ—ó", "Pastylki": "–ü–∞—Å—Ç–∏–ª–∫–∏"
};

function unifyFormName(original, source) {
    if (source === "ukraine") return original;
    return translationMap[original] || original;
}

async function fetchDataAndRenderChart(type = "bar", compare = false) {
    const formSelect = document.getElementById("formSelect");
    const innSelect = document.getElementById("innSelect");
    const countrySelect = document.getElementById("countrySelect");
    const atcSelect = document.getElementById("atcGroupSelect");

    const selectedForms = Array.from(formSelect.selectedOptions).map(opt => opt.value);
    const selectedInns = Array.from(innSelect.selectedOptions).map(opt => opt.value);
    const selectedCountries = Array.from(countrySelect.selectedOptions).map(opt => opt.value);
    const selectedAtcGroups = Array.from(atcSelect.selectedOptions).map(opt => opt.value);

    if (
      selectedForms.length === 0 &&
      selectedInns.length === 0 &&
      selectedCountries.length === 0 &&
      selectedAtcGroups.length === 0 &&
      !compare // –¥–æ–∑–≤—ñ–ª –Ω–∞ –ø–æ–±—É–¥–æ–≤—É –ª–∏—à–µ —è–∫—â–æ –ù–ï –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    ) {
    showAlert("–©–æ–± –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ñ—ñ–ª—å—Ç—Ä.");
    return;
    }

    const response = await fetch("/chart-data", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            selected_forms: selectedForms,
            selected_inns: selectedInns,
            selected_countries: selectedCountries,
            selected_atc_groups: selectedAtcGroups,
            chart_type: type,
            compare_mode: compare
        })
    });

    const data = await response.json();
    const ctx = document.getElementById("releaseChart").getContext("2d");
    if (chartInstance) chartInstance.destroy();

    // üîπ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–∞ —Ñ–æ—Ä–º–∞–º–∏
if (compare === "form" && type === "bar") {
    const ukraineRaw = data["–£–∫—Ä–∞—ó–Ω–∞"] || {};
    const polandRaw = data["–ü–æ–ª—å—â–∞"] || {};

    const formCounts = {};
    const labelsSet = new Set();

    // –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –ø–æ –£–∫—Ä–∞—ó–Ω—ñ
    for (const [form, count] of Object.entries(ukraineRaw)) {
        const unified = unifyFormName(form, "ukraine");
        if (!formCounts[unified]) formCounts[unified] = { ua: 0, pl: 0 };
        formCounts[unified].ua += count;
        labelsSet.add(unified);
    }

    // –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –ø–æ –ü–æ–ª—å—â—ñ
    for (const [form, count] of Object.entries(polandRaw)) {
        const unified = unifyFormName(form, "poland");
        if (!formCounts[unified]) formCounts[unified] = { ua: 0, pl: 0 };
        formCounts[unified].pl += count;
        labelsSet.add(unified);
    }

    // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Ç—ñ, –¥–µ –æ–±–∏–¥–≤—ñ –∫—Ä–∞—ó–Ω–∏ –º–∞—é—Ç—å 0
    const labels = Array.from(labelsSet).filter(label =>
        formCounts[label].ua > 0 || formCounts[label].pl > 0
    );

    const uaData = labels.map(label => formCounts[label].ua);
    const plData = labels.map(label => formCounts[label].pl);

    chartInstance = new Chart(ctx, {
        type: "bar",
        data: {
            labels: labels,
            datasets: [
                {
                    label: "–£–∫—Ä–∞—ó–Ω–∞",
                    data: uaData,
                    backgroundColor: getColor(0)
                },
                {
                    label: "–ü–æ–ª—å—â–∞",
                    data: plData,
                    backgroundColor: getColor(1)
                }
            ]
        },
        options: getOptions(true, "form")
    });
    return;
}


    // üîπ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–∞ –∫—Ä–∞—ó–Ω–∞–º–∏
    if (compare === "country" && type === "bar") {
    const ukraineRaw = data["–£–∫—Ä–∞—ó–Ω–∞"] || {};
    const polandRaw = data["–ü–æ–ª—å—â–∞"] || {};

    const countryCounts = {};
    const labelsSet = new Set();

    // –û–±—Ä–æ–±–∫–∞ –£–∫—Ä–∞—ó–Ω–∏
    for (const [country, count] of Object.entries(ukraineRaw)) {
        const unified = unifyCountryName(country, "ukraine");
        if (!countryCounts[unified]) countryCounts[unified] = { ua: 0, pl: 0 };
        countryCounts[unified].ua += count;
        labelsSet.add(unified);
    }

    // –û–±—Ä–æ–±–∫–∞ –ü–æ–ª—å—â—ñ
    for (const [country, count] of Object.entries(polandRaw)) {
        const unified = unifyCountryName(country, "poland");
        if (!countryCounts[unified]) countryCounts[unified] = { ua: 0, pl: 0 };
        countryCounts[unified].pl += count;
        labelsSet.add(unified);
    }

    // –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤—É—î–º–æ –∫—Ä–∞—ó–Ω–∏ –±–µ–∑ –∂–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    const labels = Array.from(labelsSet).filter(label =>
        countryCounts[label].ua > 0 || countryCounts[label].pl > 0
    );

    const uaData = labels.map(label => countryCounts[label].ua);
    const plData = labels.map(label => countryCounts[label].pl);

    chartInstance = new Chart(ctx, {
        type: "bar",
        data: {
            labels: labels,
            datasets: [
                {
                    label: "–£–∫—Ä–∞—ó–Ω–∞",
                    data: uaData,
                    backgroundColor: getColor(0)
                },
                {
                    label: "–ü–æ–ª—å—â–∞",
                    data: plData,
                    backgroundColor: getColor(1)
                }
            ]
        },
        options: getOptions(true, "country")
    });
    return;
}



    // üîπ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–∞ ATC-–∫–æ–¥–∞–º–∏
if (compare === "atc" && type === "bar") {
    const allAtcs = Array.from(new Set([
        ...Object.keys(data["–£–∫—Ä–∞—ó–Ω–∞"] || {}),
        ...Object.keys(data["–ü–æ–ª—å—â–∞"] || {})
    ])).sort();

    const ukraineData = allAtcs.map(code => data["–£–∫—Ä–∞—ó–Ω–∞"]?.[code] || 0);
    const polandData = allAtcs.map(code => data["–ü–æ–ª—å—â–∞"]?.[code] || 0);

    chartInstance = new Chart(ctx, {
        type: "bar",
        data: {
            labels: allAtcs,
            datasets: [
                {
                    label: "–£–∫—Ä–∞—ó–Ω–∞",
                    data: ukraineData,
                    backgroundColor: getColor(0)
                },
                {
                    label: "–ü–æ–ª—å—â–∞",
                    data: polandData,
                    backgroundColor: getColor(1)
                }
            ]
        },
        options: getOptions(compare)
    });
    return;
}

 if (selectedAtcGroups.length > 0 && !compare) {
    const labels = Object.keys(data);
    const values = Object.values(data);

    chartInstance = new Chart(ctx, {
        type: "bar",
        data: {
            labels: labels,
            datasets: [{
                label: "–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
                data: values,
                backgroundColor: labels.map((_, i) => getColor(i))
            }]
        },
        options: getOptions(true)
    });
    return;
}

        // üîπ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è pie/line
    const isPieOrLine = type === "pie" || type === "line";
    const exactlyOneForm = selectedForms.length === 1 && selectedCountries.length === 0 && selectedAtcGroups.length === 0;
    const exactlyOneCountry = selectedCountries.length === 1 && selectedForms.length === 0 && selectedAtcGroups.length === 0;
    const exactlyOneAtc = selectedAtcGroups.length === 1 && selectedForms.length === 0 && selectedCountries.length === 0;

    if (isPieOrLine) {
        if (!(exactlyOneForm || exactlyOneCountry || exactlyOneAtc)) {
            showAlert("–©–æ–± –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –∫—Ä—É–≥–æ–≤—É –∞–±–æ –ª—ñ–Ω—ñ–π–Ω—É –¥—ñ–∞–≥—Ä–∞–º—É, –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–Ω–æ –æ–¥–Ω—É —Ñ–æ—Ä–º—É, –∞–±–æ –æ–¥–Ω—É –∫—Ä–∞—ó–Ω—É, –∞–±–æ –æ–¥–Ω—É ATC-–≥—Ä—É–ø—É.");
            return;
        }

        const labels = Object.keys(data);
        const values = Object.values(data);
        const label =
            exactlyOneForm ? selectedForms[0] :
            exactlyOneCountry ? selectedCountries[0] :
            "–ü–æ–≤–Ω—ñ ATC-–∫–æ–¥–∏";

        if (labels.length === 0) {
            showAlert("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞ –æ–±—Ä–∞–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.");
            return;
        }

        chartInstance = new Chart(ctx, {
            type: type,
            data: {
                labels: labels,
                datasets: [{
                    label: label,
                    data: values,
                    backgroundColor: labels.map((_, i) => getColor(i))
                }]
            },
            options: getOptions(compare, false)
        });
        return;
    }

    // üîπ –°—Ç–æ–≤–ø—á–∏–∫–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –∑–∞ —Ñ–æ—Ä–º–∞–º–∏/–∫—Ä–∞—ó–Ω–∞–º–∏
    if (type === "bar") {
        const allForms = Object.keys(data);
        const allCountries = Array.from(new Set(
            allForms.flatMap(form => Object.keys(data[form]))
        ));

        const datasets = allCountries.map((country, i) => ({
            label: country,
            data: allForms.map(form => data[form][country] || 0),
            backgroundColor: getColor(i)
        }));

        chartInstance = new Chart(ctx, {
            type: "bar",
            data: {
                labels: allForms,
                datasets: datasets
            },
            options: getOptions(compare)
        });
        return;
    }

    showAlert("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.");
}


function getOptions(enableLegend = true, compareMode = null) {
    return {
        responsive: true,
        plugins: {
            tooltip: {
                mode: 'index',
                callbacks: {
                    label: function (context) {
                        if (compareMode === "form" || compareMode === "country" || compareMode === "atc") {
                            const value = context.raw;
                            return `${context.dataset.label}: ${value}`;
                        }
                        const total = context.dataset.data.reduce((sum, val) => sum + val, 0);
                        const value = context.raw;
                        const percent = ((value / total) * 100).toFixed(1);
                        return `${context.dataset.label}: ${value} (${percent}%)`;
                    }
                }
            },
            legend: enableLegend ? { position: 'top' } : false
        },
        scales: {
            x: { stacked: false },
            y: { beginAtZero: true, ticks: { precision: 0 } }
        }
    };
}


function saveChartAsImage() {
    const canvas = document.getElementById("releaseChart");
    const link = document.createElement("a");
    link.href = canvas.toDataURL("image/png");
    link.download = "chart.png";
    link.click();
}

function showAlert(message) {
    const alertBox = document.getElementById("alertBox");
    alertBox.textContent = message;
    alertBox.style.display = "block";
    setTimeout(() => {
        alertBox.style.display = "none";
    }, 5000);
}

function setupCompareButtons() {
    const formBtn = document.getElementById("compareFormBtn");
    const countryBtn = document.getElementById("compareCountryBtn");
    const atcBtn = document.getElementById("compareAtcBtn");
    const typeSelector = document.getElementById("chartType");
    const atcSelector = document.getElementById("atcGroupSelect");

    if (formBtn) {
        formBtn.addEventListener("click", () => {
            const isActive = formBtn.classList.toggle("active");
            countryBtn.classList.remove("active");
            atcBtn.classList.remove("active");
            atcBtn.textContent = "–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∏ –∑–∞ ATC";

            if (isActive) {
                formBtn.textContent = "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤";
                hideAllFiltersExceptForm();
                hideChartTypeSelector();
                hideOtherButtons(formBtn);
                fetchDataAndRenderChart("bar", "form");
            } else {
                formBtn.textContent = "–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∏ –∑–∞ —Ñ–æ—Ä–º–∞–º–∏";
                showAllFilters();
                showChartTypeSelector();
                showAllCompareButtons();
                fetchDataAndRenderChart(typeSelector.value, false);
            }
        });
    }

    if (countryBtn) {
        countryBtn.addEventListener("click", () => {
            const isActive = countryBtn.classList.toggle("active");
            formBtn.classList.remove("active");
            atcBtn.classList.remove("active");
            atcBtn.textContent = "–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∏ –∑–∞ ATC";

            if (isActive) {
                countryBtn.textContent = "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤";
                hideAllFiltersExceptCountry();
                hideChartTypeSelector();
                hideOtherButtons(countryBtn);
                fetchDataAndRenderChart("bar", "country");
            } else {
                countryBtn.textContent = "–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∏ –∑–∞ –∫—Ä–∞—ó–Ω–∞–º–∏";
                showAllFilters();
                showChartTypeSelector();
                showAllCompareButtons();
                fetchDataAndRenderChart(typeSelector.value, false);
            }
        });
    }

    if (atcBtn) {
        atcBtn.addEventListener("click", () => {
            const isActive = atcBtn.classList.toggle("active");
            formBtn.classList.remove("active");
            countryBtn.classList.remove("active");

            if (isActive) {
                atcBtn.textContent = "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤";
                hideAllFiltersExceptATC();
                hideChartTypeSelector();
                hideOtherButtons(atcBtn);
                fetchDataAndRenderChart("bar", "atc");

                atcSelector.addEventListener("change", () => {
                    fetchDataAndRenderChart("bar", "atc");
                });

            } else {
                atcBtn.textContent = "–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∏ –∑–∞ ATC";
                showAllFilters();
                showChartTypeSelector();
                showAllCompareButtons();
                fetchDataAndRenderChart(typeSelector.value, false);
            }
        });
    }

    // üîπ –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
    function hideOtherButtons(activeBtn) {
        [formBtn, countryBtn, atcBtn].forEach(btn => {
            if (btn !== activeBtn) {
                btn.style.display = "none";
            }
        });
    }

    function showAllCompareButtons() {
        [formBtn, countryBtn, atcBtn].forEach(btn => {
            btn.style.display = "inline-block";
        });
    }

    function hideChartTypeSelector() {
        document.getElementById("chartTypeWrapper").style.display = "none";
    }

    function showChartTypeSelector() {
        document.getElementById("chartTypeWrapper").style.display = "block";
    }

    function hideAllFiltersExceptForm() {
        document.getElementById("formWrapper").style.display = "block";
        document.getElementById("innWrapper").style.display = "none";
        document.getElementById("countryWrapper").style.display = "none";
        document.getElementById("atcWrapper").style.display = "none";
    }

    function hideAllFiltersExceptCountry() {
        document.getElementById("formWrapper").style.display = "none";
        document.getElementById("innWrapper").style.display = "none";
        document.getElementById("countryWrapper").style.display = "block";
        document.getElementById("atcWrapper").style.display = "none";
    }

    function hideAllFiltersExceptATC() {
        document.getElementById("formWrapper").style.display = "none";
        document.getElementById("innWrapper").style.display = "none";
        document.getElementById("countryWrapper").style.display = "none";
        document.getElementById("atcWrapper").style.display = "block";
    }
}

function showAllFilters() {
        document.getElementById("formWrapper").style.display = "block";
        document.getElementById("innWrapper").style.display = "block";
        document.getElementById("countryWrapper").style.display = "block";
        document.getElementById("atcWrapper").style.display = "block";
    }

document.addEventListener("DOMContentLoaded", () => {

    setupCompareButtons();

    const typeSelector = document.getElementById("chartType");
    const formSelector = document.getElementById("formSelect");
    const innSelector = document.getElementById("innSelect");
    const countrySelector = document.getElementById("countrySelect");
    const saveBtn = document.getElementById("saveChartBtn");
    const atcSelect = document.getElementById("atcGroupSelect");

    function render() {
    const formActive = document.getElementById("compareFormBtn")?.classList.contains("active");
    const countryActive = document.getElementById("compareCountryBtn")?.classList.contains("active");
    const atcActive = document.getElementById("compareAtcBtn")?.classList.contains("active");

    const mode = formActive ? "form" :
                 countryActive ? "country" :
                 atcActive ? "atc" : false;

    fetchDataAndRenderChart(typeSelector.value, mode);
    }

    typeSelector.addEventListener("change", render);
    formSelector.addEventListener("change", render);
    innSelector.addEventListener("change", render);
    countrySelector.addEventListener("change", render);
    atcSelect.addEventListener("change", render);
    saveBtn.addEventListener("click", saveChartAsImage);
    render();
});


function hideChartTypeSelector() {
    document.getElementById("chartTypeWrapper").style.display = "none";
}

function showChartTypeSelector() {
    document.getElementById("chartTypeWrapper").style.display = "block";
}
