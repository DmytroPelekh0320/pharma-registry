from flask import Flask, render_template, request, redirect, url_for, session
from flask_mail import Mail, Message
from werkzeug.security import check_password_hash
import sqlite3
from flask import send_file
import random
import pandas as pd
import os
import requests
from datetime import datetime
import csv
from flask import make_response, jsonify
import json
import io
from werkzeug.security import generate_password_hash
from dotenv import load_dotenv
polish_data_cache = None

load_dotenv()


app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY")


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—Ç–∏
app.config.update(
    MAIL_SERVER='smtp.gmail.com',
    MAIL_PORT=587,
    MAIL_USE_TLS=True,
    MAIL_USERNAME=os.getenv("MAIL_USERNAME"),
    MAIL_PASSWORD=os.getenv("MAIL_PASSWORD"),
)

mail = Mail(app)

# –°–ª–æ–≤–Ω–∏–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
keywords = ["–ê–µ—Ä–æ–∑–æ–ª—å", "–ë–∞–ª—å–∑–∞–º", "–ë—Ä—É–Ω—å–∫–∏", "–í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–º'—è–∑–æ–≤—ñ —ñ–Ω'—î–∫—Ü—ñ—ó", "–í—É—à–Ω—ñ –∫—Ä–∞–ø–ª—ñ", "–ì–∞–∑", "–ì–µ–ª—å", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "–ì—Ä–∞–Ω—É–ª–∏", "–ì—Ä–∞–Ω—É–ª—è—Ç", "–ì—É–º–∫–∞", "–ì—É—Å—Ç–∞ –º–∞—Å–∞", "–î—Ä–∞–∂–µ", "–ï–∫—Å—Ç—Ä–∞–∫—Ç", "–ï–º—É–ª—å–≥–µ–ª—å", "–ï–º—É–ª—å—Å—ñ—è", "–ñ—É–≤–∞–ª—å–Ω—ñ —Ç–∞–±–ª–µ—Ç–∫–∏", "–ó–±—ñ—Ä", "–Ü–Ω'—î–∫—Ü—ñ—ó",  "–ö–∞–ø—Å—É–ª–∏", "–ö–≤—ñ—Ç–∫–∏", "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç", "–ö–æ—Ä–∞", "–ö–æ—Ä–µ–Ω–µ–≤–∏—â–∞", "–ö–æ—Ä–µ–Ω—ñ", "–ö–æ—Ä—ñ–Ω—å", "–ö—Ä–∞–ø–ª—ñ", "–ö—Ä–µ–º", "–ö—É–±–∏–∫–∏", "–ö—ñ–ª—å—Ü–µ", "–õ–∞–∫", "–õ–∏—Å—Ç—è", "–õ–æ—Å—å–π–æ–Ω", "–õ—å–æ–¥—è–Ω–∏–∫", "–õ—ñ–∫–∞—Ä—Å—å–∫–∞ —Ä–æ—Å–ª–∏–Ω–Ω–∞ —Å–∏—Ä–æ–≤–∏–Ω–∞",
            "–õ—ñ–Ω—ñ–º–µ–Ω—Ç", "–õ—ñ–æ—Ñ—ñ–ª—ñ–∑–∞—Ç", "–ú–∞–∑—å", "–ù–∞–±—ñ—Ä", "–ù–∞—Å—Ç–æ–π–∫–∞", "–ù–∞—Å—ñ–Ω–Ω—è", "–û–ª—ñ—è", "–û–ø–æ–ª—ñ—Å–∫—É–≤–∞—á", "–ü–∞—Ä–∏", "–ü–∞—Å—Ç–∞", "–ü–∞—Å—Ç–∏–ª–∫–∏", "–ü–µ–ª–µ—Ç–∏", "–ü–µ—Å–∞—Ä—ñ—ó", "–ü–ª–∞—Å—Ç–∏—Ä", "–ü–ª–∏—Ç–∫–∏", "–ü–ª–æ–¥–∏", "–ü–æ—Ä–æ—à–æ–∫", "–ü—ñ–¥—à–∫—ñ—Ä–Ω—ñ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç–∏", "–ü—ñ–Ω–∞", "–†–æ–∑—á–∏–Ω", "–†–æ–∑—á–∏–Ω–Ω–∏–∫", "–†—ñ–¥–∏–Ω–∞", "–°–∏—Ä–æ–ø", "–°–ª–∞–Ω—ñ", "–°–ø—Ä–µ–π", "–°—Ç—É–ª–∫–∏", "–°—É–±—Å—Ç–∞–Ω—Ü—ñ—è", "–°—É–ø–ª—ñ–¥–¥—è", "–°—É–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó", "–°—É—Å–ø–µ–Ω–∑—ñ—è", "–¢–∞–±–ª–µ—Ç–∫–∏", "–¢–∞–±–ª–µ—Ç–∫–∏ –ø—Ä–æ–ª–æ–Ω–≥–æ–≤–∞–Ω–æ—ó –¥—ñ—ó", "–¢–∞–±–ª–µ—Ç–∫–∏ —à–∏–ø—É—á—ñ", "–¢—Ä–∞–≤–∞", "–ß–∞–π", "–®–∞–º–ø—É–Ω—å"]
# –°–ø—Ä–æ—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
def simplify_form(text, keywords):
    for keyword in keywords:
        if keyword.lower() in text.lower():
            return keyword
    return "–Ü–Ω—à–µ"


# –ü–æ–ª—å—Å—å–∫—ñ –∫–ª—é—á–æ–≤—ñ —Ñ–æ—Ä–º–∏ –≤–∏–ø—É—Å–∫—É
polish_keywords = [
    "Aerozol", "Balsam", "Gaz", "≈ªel", "Granulat", "Dra≈ºetki", "Ekstrakt", "Emulsja",
    "Tabletki", "Kapsu≈Çki", "Ma≈õƒá", "Syrop", "Krople", "Roztw√≥r", "Zawiesina", "Pasta",
    "P≈Çyn", "Liofilizat", "Czopki", "Spray", "Substancja", "Implant", "Plaster", "Szampon",
    "Koncentrat", "Proszek", "Zio≈Ça", "Globulki", "Pastylki"
]

def simplify_form_polish(text, keywords):
    for keyword in keywords:
        if keyword.lower() in text.lower():
            return keyword
    return "Inne"


def load_data(source="ukraine"):
    data = []

    if source == "ukraine":
        with open("reestr.csv", encoding="cp1251") as f:
            reader = csv.DictReader(f, delimiter=';')
            for row in reader:
                form = simplify_form(row.get("–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É", ""), keywords)
                country = None
                for i in range(1, 6):
                    val = row.get(f"–í–∏—Ä–æ–±–Ω–∏–∫ {i}: –∫—Ä–∞—ó–Ω–∞")
                    if val and val.strip():
                        country = val.strip()
                        break
                data.append({
                    "–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è": row.get("–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "").strip(),
                    "–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É": form,
                    "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è": row.get("–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "").strip(),
                    "–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞": country or "–ù–µ–≤—ñ–¥–æ–º–æ"
                })

    elif source == "poland":
        global polish_data_cache

        if polish_data_cache is None:
            df = pd.read_excel(
                "Rejestr_Produktow_Leczniczych_calosciowy_stan_na_dzien_20250302.xlsx",
                engine="openpyxl",
                usecols=[
                    "Nazwa Produktu Leczniczego",
                    "Postaƒá farmaceutyczna",
                    "Nazwa powszechnie stosowana",
                    "Kraj wytw√≥rcy"
                ]
            )
            polish_data_cache = df.copy()
        else:
            df = polish_data_cache

        total = 0
        valid_names = 0
        valid_inns = 0

        for row in df.to_dict("records"):
            total += 1
            name = str(row.get("Nazwa Produktu Leczniczego", "")).strip()
            inn = str(row.get("Nazwa powszechnie stosowana", "") or "").strip()
            form_raw = str(row.get("Postaƒá farmaceutyczna", "") or "").strip()
            country = str(row.get("Kraj wytw√≥rcy", "") or "").strip()

            if not name or name.lower() in ("nan", ""):
                continue
            valid_names += 1

            if not inn or inn.lower() in ("-", "nan") or inn.replace(".", "").isnumeric():
                inn = "‚Äî"
            else:
                valid_inns += 1

            if not country or country.lower() in ("nan",):
                country = "–ù–µ–≤—ñ–¥–æ–º–æ"

            data.append({
                "–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è": name,
                "–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É": simplify_form_polish(form_raw, polish_keywords),
                "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è": inn,
                "–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞": country
            })

        print(f"üîç –ü–æ–ª—å—Å—å–∫–∏–π —Ä–µ—î—Å—Ç—Ä: –∑—á–∏—Ç–∞–Ω–æ —Ä—è–¥–∫—ñ–≤: {total}")
        print(f"‚úÖ –í–∞–ª—ñ–¥–Ω—ñ –Ω–∞–∑–≤–∏: {valid_names}")
        print(f"‚úÖ –í–∞–ª—ñ–¥–Ω—ñ –ú–ù–ù: {valid_inns}")
        print(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {len(data)}")

    return data





def clean_country(val):
    if not isinstance(val, str):
        return None
    return val.split('\n')[0].strip()


# üîê –í—Ö—ñ–¥
@app.route("/login", methods=["GET", "POST"])
def login():
    print("Login page loaded. Method:", request.method)
    print("SESSION:", session)
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]

        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT id, password_hash FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        conn.close()

        if user and check_password_hash(user[1], password):
            verification_code = str(random.randint(100000, 999999))
            session["temp_user_id"] = user[0]
            session["verification_code"] = verification_code

            msg = Message("–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—Ö–æ–¥—É",
                          sender=app.config["MAIL_USERNAME"],
                          recipients=[username])
            msg.body = f"–í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {verification_code}"
            mail.send(msg)

            return redirect(url_for("verify"))
        else:
            return "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å"

    return render_template("login.html")

# üßæ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–¥—É
@app.route("/verify", methods=["GET", "POST"])
def verify():
    if "temp_user_id" not in session:
        return redirect(url_for("login"))

    if request.method == "POST":
        code_entered = request.form["code"]
        if code_entered == session.get("verification_code"):
            session["user_id"] = session.pop("temp_user_id")
            session.pop("verification_code")
            return redirect(url_for("index"))
        else:
            return "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

    return render_template("verify.html")


@app.route("/set_source", methods=["POST"])
def set_source():
    session["source"] = request.form.get("source", "ukraine")
    return redirect(url_for("index"))


@app.route("/", methods=["GET"])
def index():
    source = session.get("source", "ukraine")
    raw_data = load_data(source)

    data = []
    for row in raw_data:
        # –°–ø—Ä–æ—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –≤–∏–ø—É—Å–∫—É –æ–∫—Ä–µ–º–æ, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–∂–µ—Ä–µ–ª–∞
        if source == "ukraine":
            row["–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É"] = simplify_form(str(row.get("–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É", "")), keywords)
        else:
            row["–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É"] = simplify_form_polish(str(row.get("–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É", "")), polish_keywords)
        data.append(row)

    # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–ª—ñ–≤ (–Ω–∞–∑–≤–∞ —Ç–∞ –ú–ù–ù)
    names = sorted(set(
        str(row.get("–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è")).strip()
        for row in data
        if isinstance(row.get("–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"), str) and row.get("–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è").strip()
    ))

    inns = sorted(set(
        val for val in (
            str(row.get("–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "")).strip()
            for row in data
      )
      if val and val != "-" and not val.replace(".", "").isnumeric()
    ))


    forms = sorted(set(
        str(row.get("–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É", "")).strip()
        for row in data
        if row.get("–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É")
    ))

    # –ö—Ä–∞—ó–Ω–∏ ‚Äî —Ä–æ–∑–¥—ñ–ª—è—î–º–æ, —è–∫—â–æ —ó—Ö –∫—ñ–ª—å–∫–∞ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É
    countries = sorted(set(
        country.strip()
        for row in data
        for country in str(row.get("–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞", "")).split("\n")
        if country.strip()
    ))


    print(f"üß¨ –ú–ù–ù —É —Ñ—ñ–ª—å—Ç—Ä—ñ: {len(inns)} –Ω–∞–∑–≤, –ø–µ—Ä—à—ñ 50: {inns[:50]}")
    print(f"üè∑Ô∏è –¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω—ñ –Ω–∞–∑–≤–∏ —É —Ñ—ñ–ª—å—Ç—Ä—ñ: {len(names)} –Ω–∞–∑–≤, –ø–µ—Ä—à—ñ 50: {names[:50]}")


    return render_template(
        "index.html",
        forms=forms,
        inns=inns,
        names=names,
        countries=countries,
        guest="user_id" not in session,
        source=source
    )







@app.route("/search", methods=["POST"])
def search():
    data = request.get_json()
    name_filter = data.get("name", "").lower()
    form_filter = data.get("form", "")
    inn_filter = data.get("inn", "")
    country_filter = data.get("country", "")

    results = []
    source = session.get("source", "ukraine")
    all_data = load_data(source)

    for row in all_data:
        if name_filter and name_filter != (row["–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"] or "").lower():
            continue
        if form_filter and row["–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É"] != form_filter:
            continue
        if inn_filter and row["–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"] != inn_filter:
            continue
        if country_filter and row["–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞"] != country_filter:
            continue

        results.append(row)

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó (–±–µ–∑ –∑–º—ñ–Ω)
    if "user_id" in session:
        try:
            conn = sqlite3.connect("users.db")
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO query_history (
                    user_id, timestamp, name_filter, form_filter, inn_filter, country_filter, result_count, results_json
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                session["user_id"],
                datetime.now().isoformat(),
                name_filter or None,
                form_filter or None,
                inn_filter or None,
                country_filter or None,
                len(results),
                json.dumps(results, ensure_ascii=False)
            ))
            conn.commit()
            conn.close()
        except Exception as e:
            print(f"[ERROR] –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–ø–∏—Å–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é: {e}")

    return jsonify(results)



# üö™ –í–∏—Ö—ñ–¥
@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("login"))


@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]

        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()

        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
        cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
        existing_user = cursor.fetchone()

        if existing_user:
            conn.close()
            return "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î."

        # —Ö–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
        password_hash = generate_password_hash(password)

        # –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)", (username, password_hash))
        conn.commit()
        conn.close()

        return redirect(url_for("login"))

    return render_template("register.html")


@app.route("/history")
def history():
    if "user_id" not in session:
        return redirect(url_for("login"))

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, timestamp, name_filter, form_filter, inn_filter, country_filter, result_count, results_json
        FROM query_history
        WHERE user_id = ?
        ORDER BY timestamp DESC
    """, (session["user_id"],))

    rows = cursor.fetchall()
    conn.close()

    records = []
    for row in rows:
        records.append({
            "id": row[0],
            "timestamp": row[1],
            "name_filter": row[2],
            "form_filter": row[3],
            "inn_filter": row[4],
            "country_filter": row[5],
            "result_count": row[6],
            "results": json.loads(row[7] or "[]")
        })

    return render_template("history.html", records=records)




@app.route("/download/<int:record_id>")
def download(record_id):
    if "user_id" not in session:
        return redirect(url_for("login"))

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT results_json FROM query_history
        WHERE id = ? AND user_id = ?
    """, (record_id, session["user_id"]))
    row = cursor.fetchone()
    conn.close()

    if not row or not row[0]:
        return "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.", 404

    results = json.loads(row[0])

    output = io.StringIO()
    writer = csv.DictWriter(output, fieldnames=[
        "–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è",
        "–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É",
        "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è",
        "–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞"
    ])
    writer.writeheader()
    for item in results:
        writer.writerow({
            "–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è": item.get("–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", ""),
            "–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É": item.get("–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É", ""),
            "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è": item.get("–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", ""),
            "–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞": item.get("–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞", "")
        })

    output.seek(0)
    return send_file(io.BytesIO(output.getvalue().encode("utf-8-sig")),
                     mimetype="text/csv",
                     as_attachment=True,
                     download_name=f"results_{record_id}.csv")


@app.route("/save_results", methods=["POST"])
def save_results():
    if "user_id" not in session:
        return "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –£–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É, —â–æ–± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.", 403

    raw_data = request.form.get("results")
    if not raw_data:
        return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", 400

    try:
        records = json.loads(raw_data)
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö: {str(e)}", 400

    bom = '\ufeff'
    csv_content = bom + "–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è,–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É,–ú–ù–ù,–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞\n"
    for row in records:
        csv_content += f"{row.get('–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è','')},{row.get('–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É','')},{row.get('–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è','')},{row.get('–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞','')}\n"

    response = make_response(csv_content)
    response.headers["Content-Disposition"] = "attachment; filename=result.csv"
    response.headers["Content-Type"] = "text/csv; charset=utf-8"
    return response


# üîΩ ID —Ç–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∑ Google –î–∏—Å–∫—É
DRIVE_FILE_ID = "1Fn6iv3UNRPajBFbU-yKSzuRqHz1m4K61"
LOCAL_FILENAME = "reestr.csv"

def ensure_file_exists():
    if not os.path.exists(LOCAL_FILENAME):
        print("[INFO] –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∑ Google –î–∏—Å–∫—É...")
        download_from_drive()
        print("[INFO] –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")

def download_from_drive():
    url = f"https://drive.google.com/uc?export=download&id={DRIVE_FILE_ID}"
    response = requests.get(url)

    if response.status_code == 200:
        with open(LOCAL_FILENAME, "wb") as f:
            f.write(response.content)
    else:
        raise Exception("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ Google –î–∏—Å–∫—É. –ü–µ—Ä–µ–≤—ñ—Ä URL –∞–±–æ –¥–æ—Å—Ç—É–ø.")


@app.route("/charts")
def charts():
    if "user_id" not in session:
        return redirect(url_for("login"))

    source = session.get("source", "ukraine")
    all_data = load_data(source)

    forms = sorted(set(row["–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É"] for row in all_data))
    inns = sorted(set(row["–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"] for row in all_data if row["–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"]))
    countries = sorted(set(row["–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞"] for row in all_data if row["–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞"] and row["–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞"] != "–ù–µ–≤—ñ–¥–æ–º–æ"))

    return render_template(
        "charts.html",
        forms=forms,
        inns=inns,
        countries=countries,
        preset_form=request.args.get("form"),
        preset_inn=request.args.get("inn"),
        preset_country=request.args.get("country"),
        source=source
    )




@app.route("/chart-data", methods=["POST"])
def chart_data():
    data = request.get_json()
    selected_forms = data.get("selected_forms", [])
    selected_inns = data.get("selected_inns", [])
    selected_countries = data.get("selected_countries", [])
    chart_type = data.get("chart_type", "bar")

    source = session.get("source", "ukraine")
    all_data = load_data(source)

    result = {}

    for row in all_data:
        form = row["–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É"]
        country = row["–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫–∞"]
        inn = row["–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"]

        if selected_forms and form not in selected_forms:
            continue
        if selected_inns and inn not in selected_inns:
            continue
        if selected_countries and country not in selected_countries:
            continue

        if chart_type in ["pie", "line"]:
            if len(selected_forms) == 1 and not selected_countries:
                result[country] = result.get(country, 0) + 1
            elif len(selected_countries) == 1:
                result[form] = result.get(form, 0) + 1
            else:
                return jsonify({})
        else:
            if form not in result:
                result[form] = {}
            result[form][country] = result[form].get(country, 0) + 1

    return jsonify(result)



# üîÅ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import webbrowser
    webbrowser.open("http://127.0.0.1:5000/login")  # –≤—ñ–¥–∫—Ä–∏—î login –≤ –±—Ä–∞—É–∑–µ—Ä—ñ
    app.run(debug=True)