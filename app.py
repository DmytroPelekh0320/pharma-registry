from flask import Flask, render_template, request, redirect, url_for, session
from flask_mail import Mail, Message
from werkzeug.security import check_password_hash
import sqlite3
import random
import os
import csv
from dotenv import load_dotenv
load_dotenv()


app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY")


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—Ç–∏
app.config.update(
    MAIL_SERVER='smtp.gmail.com',
    MAIL_PORT=587,
    MAIL_USE_TLS=True,
    MAIL_USERNAME=os.getenv("MAIL_USERNAME"),
    MAIL_PASSWORD=os.getenv("MAIL_PASSWORD"),
)

mail = Mail(app)

# –°–ª–æ–≤–Ω–∏–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
keywords = ["–ê–µ—Ä–æ–∑–æ–ª—å", "–ë–∞–ª—å–∑–∞–º", "–ë—Ä—É–Ω—å–∫–∏", "–í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–º'—è–∑–æ–≤—ñ —ñ–Ω'—î–∫—Ü—ñ—ó", "–í—É—à–Ω—ñ –∫—Ä–∞–ø–ª—ñ", "–ì–∞–∑", "–ì–µ–ª—å", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "–ì—Ä–∞–Ω—É–ª–∏", "–ì—Ä–∞–Ω—É–ª—è—Ç", "–ì—É–º–∫–∞", "–ì—É—Å—Ç–∞ –º–∞—Å–∞", "–î—Ä–∞–∂–µ", "–ï–∫—Å—Ç—Ä–∞–∫—Ç", "–ï–º—É–ª—å–≥–µ–ª—å", "–ï–º—É–ª—å—Å—ñ—è", "–ñ—É–≤–∞–ª—å–Ω—ñ —Ç–∞–±–ª–µ—Ç–∫–∏", "–ó–±—ñ—Ä", "–Ü–Ω'—î–∫—Ü—ñ—ó",  "–ö–∞–ø—Å—É–ª–∏", "–ö–≤—ñ—Ç–∫–∏", "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç", "–ö–æ—Ä–∞", "–ö–æ—Ä–µ–Ω–µ–≤–∏—â–∞", "–ö–æ—Ä–µ–Ω—ñ", "–ö–æ—Ä—ñ–Ω—å", "–ö—Ä–∞–ø–ª—ñ", "–ö—Ä–µ–º", "–ö—É–±–∏–∫–∏", "–ö—ñ–ª—å—Ü–µ", "–õ–∞–∫", "–õ–∏—Å—Ç—è", "–õ–æ—Å—å–π–æ–Ω", "–õ—å–æ–¥—è–Ω–∏–∫", "–õ—ñ–∫–∞—Ä—Å—å–∫–∞ —Ä–æ—Å–ª–∏–Ω–Ω–∞ —Å–∏—Ä–æ–≤–∏–Ω–∞",
            "–õ—ñ–Ω—ñ–º–µ–Ω—Ç", "–õ—ñ–æ—Ñ—ñ–ª—ñ–∑–∞—Ç", "–ú–∞–∑—å", "–ù–∞–±—ñ—Ä", "–ù–∞—Å—Ç–æ–π–∫–∞", "–ù–∞—Å—ñ–Ω–Ω—è", "–û–ª—ñ—è", "–û–ø–æ–ª—ñ—Å–∫—É–≤–∞—á", "–ü–∞—Ä–∏", "–ü–∞—Å—Ç–∞", "–ü–∞—Å—Ç–∏–ª–∫–∏", "–ü–µ–ª–µ—Ç–∏", "–ü–µ—Å–∞—Ä—ñ—ó", "–ü–ª–∞—Å—Ç–∏—Ä", "–ü–ª–∏—Ç–∫–∏", "–ü–ª–æ–¥–∏", "–ü–æ—Ä–æ—à–æ–∫", "–ü—ñ–¥—à–∫—ñ—Ä–Ω—ñ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç–∏", "–ü—ñ–Ω–∞", "–†–æ–∑—á–∏–Ω", "–†–æ–∑—á–∏–Ω–Ω–∏–∫", "–†—ñ–¥–∏–Ω–∞", "–°–∏—Ä–æ–ø", "–°–ª–∞–Ω—ñ", "–°–ø—Ä–µ–π", "–°—Ç—É–ª–∫–∏", "–°—É–±—Å—Ç–∞–Ω—Ü—ñ—è", "–°—É–ø–ª—ñ–¥–¥—è", "–°—É–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó", "–°—É—Å–ø–µ–Ω–∑—ñ—è", "–¢–∞–±–ª–µ—Ç–∫–∏", "–¢–∞–±–ª–µ—Ç–∫–∏ –ø—Ä–æ–ª–æ–Ω–≥–æ–≤–∞–Ω–æ—ó –¥—ñ—ó", "–¢–∞–±–ª–µ—Ç–∫–∏ —à–∏–ø—É—á—ñ", "–¢—Ä–∞–≤–∞", "–ß–∞–π", "–®–∞–º–ø—É–Ω—å"]

# –ß–∏—Ç–∞–Ω–Ω—è CSV
def load_data():
    data = []
    with open("reestr.csv", encoding="cp1251") as f:
        reader = csv.DictReader(f, delimiter=';')
        for row in reader:
            data.append(row)
    return data

# –°–ø—Ä–æ—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
def simplify_form(text, keywords):
    for keyword in keywords:
        if keyword.lower() in text.lower():
            return keyword
    return "–Ü–Ω—à–µ"

# üîê –í—Ö—ñ–¥
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]

        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT id, password_hash FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        conn.close()

        if user and check_password_hash(user[1], password):
            verification_code = str(random.randint(100000, 999999))
            session["temp_user_id"] = user[0]
            session["verification_code"] = verification_code

            msg = Message("–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—Ö–æ–¥—É",
                          sender=app.config["MAIL_USERNAME"],
                          recipients=[username])
            msg.body = f"–í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {verification_code}"
            mail.send(msg)

            return redirect(url_for("verify"))
        else:
            return "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å"

    return render_template("login.html")

# üßæ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–¥—É
@app.route("/verify", methods=["GET", "POST"])
def verify():
    if "temp_user_id" not in session:
        return redirect(url_for("login"))

    if request.method == "POST":
        code_entered = request.form["code"]
        if code_entered == session.get("verification_code"):
            session["user_id"] = session.pop("temp_user_id")
            session.pop("verification_code")
            return redirect(url_for("index"))
        else:
            return "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

    return render_template("verify.html")

# üìÑ –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
@app.route("/", methods=["GET", "POST"])
def index():
    if "user_id" not in session:
        return redirect(url_for("login"))

    data = load_data()

    for row in data:
        original_form = row["–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É"]
        row["–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É"] = simplify_form(original_form, keywords)

    forms = sorted(set(row["–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É"] for row in data))
    inns = sorted(set(row["–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"] for row in data if row["–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"]))

    filtered = []

    if request.method == "POST":
        name_filter = request.form.get("name", "")
        form_filter = request.form.get("form", "")
        inn_filter = request.form.get("inn", "")

        for row in data:
            if name_filter and name_filter.lower() not in row["–¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"].lower():
                continue
            if form_filter and row["–§–æ—Ä–º–∞ –≤–∏–ø—É—Å–∫—É"] != form_filter:
                continue
            if inn_filter and row["–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ –Ω–µ–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–µ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"] != inn_filter:
                continue
            filtered.append(row)

    return render_template("index.html", data=filtered, forms=forms, inns=inns)

# üö™ –í–∏—Ö—ñ–¥
@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("login"))

# üîÅ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app.run(debug=True)
